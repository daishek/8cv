// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile       Profile?
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model Profile {
  id        String                @id @default(auto()) @map("_id")@db.ObjectId
  username  String @unique
  name      String
  headline  String?
  about     String?
  location  String?
  website   String?
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String  @db.ObjectId @unique
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  projects        Project[]
  links           Contact[]
  
  visitors        ProfileViwes[]  @relation("VisitorProfile")
  visitedProfiles ProfileViwes[]  @relation("OwnerProfile")
}

model ProfileViwes {
  id          String                @id @default(auto()) @map("_id")@db.ObjectId
  // who visited the profile 
  visitor     String  
  Visitor     Profile @relation("VisitorProfile", fields: [visitor], references: [username], onDelete: Cascade)
  // the owner of the wisited profile
  owner       String  
  Owner       Profile @relation("OwnerProfile", fields: [owner], references: [username], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Project {
  id          String                @id @default(auto()) @map("_id")@db.ObjectId
  title       String
  year        Int
  link        String?
  client      String?
  description String?
  images      ProjectImage[]

  profileId   String
  profile     Profile @relation(fields: [profileId], references: [username], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id          String                @id @default(auto()) @map("_id")@db.ObjectId
  type        String
  link        String

  profileId   String
  profile     Profile @relation(fields: [profileId], references: [username], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectImage {
  id          String                @id @default(auto()) @map("_id")@db.ObjectId
  url         String

  projectId   String  @db.ObjectId @unique
  project     Project @relation(fields: [projectId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

